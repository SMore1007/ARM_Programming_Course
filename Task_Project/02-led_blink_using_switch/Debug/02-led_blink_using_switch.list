
02-led_blink_using_switch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000224  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003e8  080003f0  000013f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003e8  080003e8  000013f0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080003e8  080003e8  000013f0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080003e8  080003f0  000013f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003e8  080003e8  000013e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003ec  080003ec  000013ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003f0  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003f0  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000013f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000107  00000000  00000000  00001420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000096  00000000  00000000  00001527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  000015c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000002d  00000000  00000000  00001608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000fdd  00000000  00000000  00001635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000523  00000000  00000000  00002612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003de9  00000000  00000000  00002b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000691e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  00006964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000069bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080003d0 	.word	0x080003d0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080003d0 	.word	0x080003d0

08000204 <main>:

/* -------------------------------------------------------------------
 * Main Function
 * -------------------------------------------------------------------*/
int main(void)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
     * RCC_AHB1ENR:
     * Bit 2 -> GPIOCEN
     * Bit 3 -> GPIODEN
     * 0x5 = (1 << 2) | (1 << 3)
     */
    RCC_AHB1ENR |= (1 << 2) | (1 << 3);
 800020a:	4b45      	ldr	r3, [pc, #276]	@ (8000320 <main+0x11c>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4a44      	ldr	r2, [pc, #272]	@ (8000320 <main+0x11c>)
 8000210:	f043 030c 	orr.w	r3, r3, #12
 8000214:	6013      	str	r3, [r2, #0]
     * -------------------------------
     * MODER[24:25] = 01 (PIN12 Output Mode)
     * MODER[26:27] = 01 (PIN13 Output Mode)
     */

    GPIOD_MODER |=  (1U << 24);  // Set MODER10 = 1
 8000216:	4b43      	ldr	r3, [pc, #268]	@ (8000324 <main+0x120>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4a42      	ldr	r2, [pc, #264]	@ (8000324 <main+0x120>)
 800021c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000220:	6013      	str	r3, [r2, #0]
    GPIOD_MODER &= ~(1U << 25);  // Set MODER11 = 0
 8000222:	4b40      	ldr	r3, [pc, #256]	@ (8000324 <main+0x120>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a3f      	ldr	r2, [pc, #252]	@ (8000324 <main+0x120>)
 8000228:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800022c:	6013      	str	r3, [r2, #0]

    GPIOD_MODER |=  (1U << 26);  // Set MODER10 = 1
 800022e:	4b3d      	ldr	r3, [pc, #244]	@ (8000324 <main+0x120>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	4a3c      	ldr	r2, [pc, #240]	@ (8000324 <main+0x120>)
 8000234:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000238:	6013      	str	r3, [r2, #0]
    GPIOD_MODER &= ~(1U << 27);  // Set MODER11 = 0
 800023a:	4b3a      	ldr	r3, [pc, #232]	@ (8000324 <main+0x120>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4a39      	ldr	r2, [pc, #228]	@ (8000324 <main+0x120>)
 8000240:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8000244:	6013      	str	r3, [r2, #0]
     * MODER[10:11] = 00 (Input Mode)
     * MODER[12:13] = 00 (Input Mode)
     */

    // GPIOC Pin4, pin5 and pin6 to input mode
    GPIOC_MODER &= ~((3U << 8) | (3U << 10) | (3U << 12));
 8000246:	4b38      	ldr	r3, [pc, #224]	@ (8000328 <main+0x124>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	4a37      	ldr	r2, [pc, #220]	@ (8000328 <main+0x124>)
 800024c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8000250:	6013      	str	r3, [r2, #0]

    // Flag to track LED state
    volatile bool pc4LedFlag = false;
 8000252:	2300      	movs	r3, #0
 8000254:	71fb      	strb	r3, [r7, #7]
    volatile bool pc5LedFlag = false;
 8000256:	2300      	movs	r3, #0
 8000258:	71bb      	strb	r3, [r7, #6]
    volatile bool pc6LedFlag = false;
 800025a:	2300      	movs	r3, #0
 800025c:	717b      	strb	r3, [r7, #5]
    {
        /* -------------------------------
         * Read Button State (PC4, PC5 and PC6)
         * -------------------------------
         */
        if ((GPIOC_IDR & (1U << 4)) != 0){
 800025e:	4b33      	ldr	r3, [pc, #204]	@ (800032c <main+0x128>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f003 0310 	and.w	r3, r3, #16
 8000266:	2b00      	cmp	r3, #0
 8000268:	d002      	beq.n	8000270 <main+0x6c>
        	pc4LedFlag = true;   // Button pressed
 800026a:	2301      	movs	r3, #1
 800026c:	71fb      	strb	r3, [r7, #7]
 800026e:	e017      	b.n	80002a0 <main+0x9c>
        }
        else if ((GPIOC_IDR & (1U << 5)) == 0){
 8000270:	4b2e      	ldr	r3, [pc, #184]	@ (800032c <main+0x128>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	f003 0320 	and.w	r3, r3, #32
 8000278:	2b00      	cmp	r3, #0
 800027a:	d102      	bne.n	8000282 <main+0x7e>
        	pc5LedFlag = true;  // Button released
 800027c:	2301      	movs	r3, #1
 800027e:	71bb      	strb	r3, [r7, #6]
 8000280:	e00e      	b.n	80002a0 <main+0x9c>

        } else if ((GPIOC_IDR & (1U << 6)) == 0){
 8000282:	4b2a      	ldr	r3, [pc, #168]	@ (800032c <main+0x128>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800028a:	2b00      	cmp	r3, #0
 800028c:	d102      	bne.n	8000294 <main+0x90>
        	pc6LedFlag = true;
 800028e:	2301      	movs	r3, #1
 8000290:	717b      	strb	r3, [r7, #5]
 8000292:	e005      	b.n	80002a0 <main+0x9c>
        }else{
        	pc4LedFlag = false;
 8000294:	2300      	movs	r3, #0
 8000296:	71fb      	strb	r3, [r7, #7]
        	pc5LedFlag = false;
 8000298:	2300      	movs	r3, #0
 800029a:	71bb      	strb	r3, [r7, #6]
        	pc6LedFlag = false;
 800029c:	2300      	movs	r3, #0
 800029e:	717b      	strb	r3, [r7, #5]
        }

        /* -------------------------------
         * Control LED based on Flag
         * -------------------------------*/
        if (pc4LedFlag){
 80002a0:	79fb      	ldrb	r3, [r7, #7]
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d00c      	beq.n	80002c2 <main+0xbe>
        	GPIOD_ODR |=  (1U << 12);
 80002a8:	4b21      	ldr	r3, [pc, #132]	@ (8000330 <main+0x12c>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a20      	ldr	r2, [pc, #128]	@ (8000330 <main+0x12c>)
 80002ae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80002b2:	6013      	str	r3, [r2, #0]
        	GPIOD_ODR &= ~(1U << 13);
 80002b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000330 <main+0x12c>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a1d      	ldr	r2, [pc, #116]	@ (8000330 <main+0x12c>)
 80002ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80002be:	6013      	str	r3, [r2, #0]
 80002c0:	e7cd      	b.n	800025e <main+0x5a>
        }
        else if (pc5LedFlag){
 80002c2:	79bb      	ldrb	r3, [r7, #6]
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d00c      	beq.n	80002e4 <main+0xe0>
			GPIOD_ODR &= ~(1U << 12);
 80002ca:	4b19      	ldr	r3, [pc, #100]	@ (8000330 <main+0x12c>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4a18      	ldr	r2, [pc, #96]	@ (8000330 <main+0x12c>)
 80002d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80002d4:	6013      	str	r3, [r2, #0]
			GPIOD_ODR |=  (1U << 13);
 80002d6:	4b16      	ldr	r3, [pc, #88]	@ (8000330 <main+0x12c>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4a15      	ldr	r2, [pc, #84]	@ (8000330 <main+0x12c>)
 80002dc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002e0:	6013      	str	r3, [r2, #0]
 80002e2:	e7bc      	b.n	800025e <main+0x5a>
        }else if(pc6LedFlag){
 80002e4:	797b      	ldrb	r3, [r7, #5]
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d00c      	beq.n	8000306 <main+0x102>
        	GPIOD_ODR |=  (1U << 12);
 80002ec:	4b10      	ldr	r3, [pc, #64]	@ (8000330 <main+0x12c>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a0f      	ldr	r2, [pc, #60]	@ (8000330 <main+0x12c>)
 80002f2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80002f6:	6013      	str	r3, [r2, #0]
        	GPIOD_ODR |=  (1U << 13);
 80002f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000330 <main+0x12c>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000330 <main+0x12c>)
 80002fe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000302:	6013      	str	r3, [r2, #0]
 8000304:	e7ab      	b.n	800025e <main+0x5a>
        }else{
        	GPIOD_ODR &=  ~(1U << 12);
 8000306:	4b0a      	ldr	r3, [pc, #40]	@ (8000330 <main+0x12c>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4a09      	ldr	r2, [pc, #36]	@ (8000330 <main+0x12c>)
 800030c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000310:	6013      	str	r3, [r2, #0]
        	GPIOD_ODR &=  ~(1U << 13);
 8000312:	4b07      	ldr	r3, [pc, #28]	@ (8000330 <main+0x12c>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4a06      	ldr	r2, [pc, #24]	@ (8000330 <main+0x12c>)
 8000318:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800031c:	6013      	str	r3, [r2, #0]
        if ((GPIOC_IDR & (1U << 4)) != 0){
 800031e:	e79e      	b.n	800025e <main+0x5a>
 8000320:	40023830 	.word	0x40023830
 8000324:	40020c00 	.word	0x40020c00
 8000328:	40020800 	.word	0x40020800
 800032c:	40020810 	.word	0x40020810
 8000330:	40020c14 	.word	0x40020c14

08000334 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000334:	480d      	ldr	r0, [pc, #52]	@ (800036c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000336:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000338:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800033c:	480c      	ldr	r0, [pc, #48]	@ (8000370 <LoopForever+0x6>)
  ldr r1, =_edata
 800033e:	490d      	ldr	r1, [pc, #52]	@ (8000374 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000340:	4a0d      	ldr	r2, [pc, #52]	@ (8000378 <LoopForever+0xe>)
  movs r3, #0
 8000342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000344:	e002      	b.n	800034c <LoopCopyDataInit>

08000346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800034a:	3304      	adds	r3, #4

0800034c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800034c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800034e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000350:	d3f9      	bcc.n	8000346 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000352:	4a0a      	ldr	r2, [pc, #40]	@ (800037c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000354:	4c0a      	ldr	r4, [pc, #40]	@ (8000380 <LoopForever+0x16>)
  movs r3, #0
 8000356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000358:	e001      	b.n	800035e <LoopFillZerobss>

0800035a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800035a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800035c:	3204      	adds	r2, #4

0800035e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800035e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000360:	d3fb      	bcc.n	800035a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000362:	f000 f811 	bl	8000388 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000366:	f7ff ff4d 	bl	8000204 <main>

0800036a <LoopForever>:

LoopForever:
  b LoopForever
 800036a:	e7fe      	b.n	800036a <LoopForever>
  ldr   r0, =_estack
 800036c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000374:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000378:	080003f0 	.word	0x080003f0
  ldr r2, =_sbss
 800037c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000380:	2000001c 	.word	0x2000001c

08000384 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000384:	e7fe      	b.n	8000384 <ADC_IRQHandler>
	...

08000388 <__libc_init_array>:
 8000388:	b570      	push	{r4, r5, r6, lr}
 800038a:	4d0d      	ldr	r5, [pc, #52]	@ (80003c0 <__libc_init_array+0x38>)
 800038c:	4c0d      	ldr	r4, [pc, #52]	@ (80003c4 <__libc_init_array+0x3c>)
 800038e:	1b64      	subs	r4, r4, r5
 8000390:	10a4      	asrs	r4, r4, #2
 8000392:	2600      	movs	r6, #0
 8000394:	42a6      	cmp	r6, r4
 8000396:	d109      	bne.n	80003ac <__libc_init_array+0x24>
 8000398:	4d0b      	ldr	r5, [pc, #44]	@ (80003c8 <__libc_init_array+0x40>)
 800039a:	4c0c      	ldr	r4, [pc, #48]	@ (80003cc <__libc_init_array+0x44>)
 800039c:	f000 f818 	bl	80003d0 <_init>
 80003a0:	1b64      	subs	r4, r4, r5
 80003a2:	10a4      	asrs	r4, r4, #2
 80003a4:	2600      	movs	r6, #0
 80003a6:	42a6      	cmp	r6, r4
 80003a8:	d105      	bne.n	80003b6 <__libc_init_array+0x2e>
 80003aa:	bd70      	pop	{r4, r5, r6, pc}
 80003ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b0:	4798      	blx	r3
 80003b2:	3601      	adds	r6, #1
 80003b4:	e7ee      	b.n	8000394 <__libc_init_array+0xc>
 80003b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ba:	4798      	blx	r3
 80003bc:	3601      	adds	r6, #1
 80003be:	e7f2      	b.n	80003a6 <__libc_init_array+0x1e>
 80003c0:	080003e8 	.word	0x080003e8
 80003c4:	080003e8 	.word	0x080003e8
 80003c8:	080003e8 	.word	0x080003e8
 80003cc:	080003ec 	.word	0x080003ec

080003d0 <_init>:
 80003d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d2:	bf00      	nop
 80003d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d6:	bc08      	pop	{r3}
 80003d8:	469e      	mov	lr, r3
 80003da:	4770      	bx	lr

080003dc <_fini>:
 80003dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003de:	bf00      	nop
 80003e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003e2:	bc08      	pop	{r3}
 80003e4:	469e      	mov	lr, r3
 80003e6:	4770      	bx	lr
