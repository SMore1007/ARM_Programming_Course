
03-led_switch_struct_base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001b0  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000374  0800037c  0000137c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000374  08000374  0000137c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000374  08000374  0000137c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000374  0800037c  0000137c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000374  08000374  00001374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000378  08000378  00001378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000137c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800037c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800037c  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000334  00000000  00000000  000013ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000f8  00000000  00000000  000016e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000058  00000000  00000000  000017d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000038  00000000  00000000  00001830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001074  00000000  00000000  00001868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000515  00000000  00000000  000028dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000427d  00000000  00000000  00002df1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000706e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000009c  00000000  00000000  000070b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00007150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800035c 	.word	0x0800035c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	0800035c 	.word	0x0800035c

08000204 <main>:

void ledHigh(void);
void ledLow(void);

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
     * RCC_AHB1ENR:
     * Bit 0 -> GPIOAEN
     * Bit 2 -> GPIOCEN
     * 0x5 = (1 << 0) | (1 << 2)
     */
	RCC->AHB1ENR |= (0x5U << 0);
 800020a:	4b1a      	ldr	r3, [pc, #104]	@ (8000274 <main+0x70>)
 800020c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800020e:	4a19      	ldr	r2, [pc, #100]	@ (8000274 <main+0x70>)
 8000210:	f043 0305 	orr.w	r3, r3, #5
 8000214:	6313      	str	r3, [r2, #48]	@ 0x30
    /* -------------------------------
     * Configure GPIOA PIN5 as Output
     * -------------------------------
     * MODER[11:10] = 01 (Output Mode)
     */
    GPIOA->MODER |=  (1U << 10);  // Set MODER10 = 1
 8000216:	4b18      	ldr	r3, [pc, #96]	@ (8000278 <main+0x74>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4a17      	ldr	r2, [pc, #92]	@ (8000278 <main+0x74>)
 800021c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000220:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(1U << 11);  // Set MODER11 = 0
 8000222:	4b15      	ldr	r3, [pc, #84]	@ (8000278 <main+0x74>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a14      	ldr	r2, [pc, #80]	@ (8000278 <main+0x74>)
 8000228:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800022c:	6013      	str	r3, [r2, #0]
    /* -------------------------------
     * Configure GPIOC PIN13 as Input
     * -------------------------------
     * MODER[27:26] = 00 (Input Mode)
     */
    GPIOC->MODER &= ~(1U << 26);  // Clear MODER26
 800022e:	4b13      	ldr	r3, [pc, #76]	@ (800027c <main+0x78>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	4a12      	ldr	r2, [pc, #72]	@ (800027c <main+0x78>)
 8000234:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8000238:	6013      	str	r3, [r2, #0]
    GPIOC->MODER &= ~(1U << 27);  // Clear MODER27
 800023a:	4b10      	ldr	r3, [pc, #64]	@ (800027c <main+0x78>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4a0f      	ldr	r2, [pc, #60]	@ (800027c <main+0x78>)
 8000240:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8000244:	6013      	str	r3, [r2, #0]

    // Flag to track LED state
    volatile bool ledFlag = false;
 8000246:	2300      	movs	r3, #0
 8000248:	71fb      	strb	r3, [r7, #7]


    while (1)
    {
    	 if ((GPIOC->IDR & (1U << 13)) == 0)
 800024a:	4b0c      	ldr	r3, [pc, #48]	@ (800027c <main+0x78>)
 800024c:	691b      	ldr	r3, [r3, #16]
 800024e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000252:	2b00      	cmp	r3, #0
 8000254:	d102      	bne.n	800025c <main+0x58>
    	        {
    	            ledFlag = true;   // Button pressed
 8000256:	2301      	movs	r3, #1
 8000258:	71fb      	strb	r3, [r7, #7]
 800025a:	e001      	b.n	8000260 <main+0x5c>
    	        }
    	        else
    	        {
    	            ledFlag = false;  // Button released
 800025c:	2300      	movs	r3, #0
 800025e:	71fb      	strb	r3, [r7, #7]
    	        }

    	        /* -------------------------------
    	         * Control LED based on Flag
    	         * -------------------------------*/
    	        if (ledFlag)
 8000260:	79fb      	ldrb	r3, [r7, #7]
 8000262:	b2db      	uxtb	r3, r3
 8000264:	2b00      	cmp	r3, #0
 8000266:	d002      	beq.n	800026e <main+0x6a>
    	        {
    	            ledHigh();  // Turn LED on
 8000268:	f000 f80a 	bl	8000280 <ledHigh>
 800026c:	e7ed      	b.n	800024a <main+0x46>
    	        }
    	        else
    	        {
    	            ledLow();   // Turn LED off
 800026e:	f000 f817 	bl	80002a0 <ledLow>
    	 if ((GPIOC->IDR & (1U << 13)) == 0)
 8000272:	e7ea      	b.n	800024a <main+0x46>
 8000274:	40023800 	.word	0x40023800
 8000278:	40020000 	.word	0x40020000
 800027c:	40020800 	.word	0x40020800

08000280 <ledHigh>:



/* Turn LED ON (PA5 = 1) */
void ledHigh(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
    GPIOA->ODR |= (1U << 5);
 8000284:	4b05      	ldr	r3, [pc, #20]	@ (800029c <ledHigh+0x1c>)
 8000286:	695b      	ldr	r3, [r3, #20]
 8000288:	4a04      	ldr	r2, [pc, #16]	@ (800029c <ledHigh+0x1c>)
 800028a:	f043 0320 	orr.w	r3, r3, #32
 800028e:	6153      	str	r3, [r2, #20]
}
 8000290:	bf00      	nop
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	40020000 	.word	0x40020000

080002a0 <ledLow>:

/* Turn LED OFF (PA5 = 0) */
void ledLow(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
    GPIOA->ODR &= ~(1U << 5);
 80002a4:	4b05      	ldr	r3, [pc, #20]	@ (80002bc <ledLow+0x1c>)
 80002a6:	695b      	ldr	r3, [r3, #20]
 80002a8:	4a04      	ldr	r2, [pc, #16]	@ (80002bc <ledLow+0x1c>)
 80002aa:	f023 0320 	bic.w	r3, r3, #32
 80002ae:	6153      	str	r3, [r2, #20]
}
 80002b0:	bf00      	nop
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	40020000 	.word	0x40020000

080002c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c0:	480d      	ldr	r0, [pc, #52]	@ (80002f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002c4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c8:	480c      	ldr	r0, [pc, #48]	@ (80002fc <LoopForever+0x6>)
  ldr r1, =_edata
 80002ca:	490d      	ldr	r1, [pc, #52]	@ (8000300 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000304 <LoopForever+0xe>)
  movs r3, #0
 80002ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d0:	e002      	b.n	80002d8 <LoopCopyDataInit>

080002d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002d6:	3304      	adds	r3, #4

080002d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002dc:	d3f9      	bcc.n	80002d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002de:	4a0a      	ldr	r2, [pc, #40]	@ (8000308 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002e0:	4c0a      	ldr	r4, [pc, #40]	@ (800030c <LoopForever+0x16>)
  movs r3, #0
 80002e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e4:	e001      	b.n	80002ea <LoopFillZerobss>

080002e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e8:	3204      	adds	r2, #4

080002ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002ec:	d3fb      	bcc.n	80002e6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80002ee:	f000 f811 	bl	8000314 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80002f2:	f7ff ff87 	bl	8000204 <main>

080002f6 <LoopForever>:

LoopForever:
  b LoopForever
 80002f6:	e7fe      	b.n	80002f6 <LoopForever>
  ldr   r0, =_estack
 80002f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000300:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000304:	0800037c 	.word	0x0800037c
  ldr r2, =_sbss
 8000308:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800030c:	2000001c 	.word	0x2000001c

08000310 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000310:	e7fe      	b.n	8000310 <ADC_IRQHandler>
	...

08000314 <__libc_init_array>:
 8000314:	b570      	push	{r4, r5, r6, lr}
 8000316:	4d0d      	ldr	r5, [pc, #52]	@ (800034c <__libc_init_array+0x38>)
 8000318:	4c0d      	ldr	r4, [pc, #52]	@ (8000350 <__libc_init_array+0x3c>)
 800031a:	1b64      	subs	r4, r4, r5
 800031c:	10a4      	asrs	r4, r4, #2
 800031e:	2600      	movs	r6, #0
 8000320:	42a6      	cmp	r6, r4
 8000322:	d109      	bne.n	8000338 <__libc_init_array+0x24>
 8000324:	4d0b      	ldr	r5, [pc, #44]	@ (8000354 <__libc_init_array+0x40>)
 8000326:	4c0c      	ldr	r4, [pc, #48]	@ (8000358 <__libc_init_array+0x44>)
 8000328:	f000 f818 	bl	800035c <_init>
 800032c:	1b64      	subs	r4, r4, r5
 800032e:	10a4      	asrs	r4, r4, #2
 8000330:	2600      	movs	r6, #0
 8000332:	42a6      	cmp	r6, r4
 8000334:	d105      	bne.n	8000342 <__libc_init_array+0x2e>
 8000336:	bd70      	pop	{r4, r5, r6, pc}
 8000338:	f855 3b04 	ldr.w	r3, [r5], #4
 800033c:	4798      	blx	r3
 800033e:	3601      	adds	r6, #1
 8000340:	e7ee      	b.n	8000320 <__libc_init_array+0xc>
 8000342:	f855 3b04 	ldr.w	r3, [r5], #4
 8000346:	4798      	blx	r3
 8000348:	3601      	adds	r6, #1
 800034a:	e7f2      	b.n	8000332 <__libc_init_array+0x1e>
 800034c:	08000374 	.word	0x08000374
 8000350:	08000374 	.word	0x08000374
 8000354:	08000374 	.word	0x08000374
 8000358:	08000378 	.word	0x08000378

0800035c <_init>:
 800035c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800035e:	bf00      	nop
 8000360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000362:	bc08      	pop	{r3}
 8000364:	469e      	mov	lr, r3
 8000366:	4770      	bx	lr

08000368 <_fini>:
 8000368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800036a:	bf00      	nop
 800036c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800036e:	bc08      	pop	{r3}
 8000370:	469e      	mov	lr, r3
 8000372:	4770      	bx	lr
